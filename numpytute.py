# -*- coding: utf-8 -*-
"""numpytute.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RKNqnyxeXQUXUEqhHwolCizaSCcq18OO
"""

import numpy as np
x = np.array(6) #scalar
y = np.array([1.3, 2.2, 1.7]) #vector
a = np.array([[1,2],[3,4]]) #matrix
b = np.array([[[1,2],[3,4],[5,6],[7,8]]]) #3d tensor
print('x: ', x)
print('x ndim: ', x.ndim)
print('x shape: ', x.shape)
print('x size: ', x.size)
print('x dtype: ', x.dtype)

print('y: ', y)
print('y ndim: ', y.ndim)
print('y shape: ', y.shape)
print('y size: ', y.size)
print('y dtype: ', y.dtype)

print('a:\n ', a)
print('a ndim: ', a.ndim)
print('a shape: ', a.shape)
print('a size: ', a.size)
print('a dtype: ', a.dtype)

print('b:\n ', b)
print('b ndim: ', b.ndim)
print('b shape: ', b.shape)
print('b size: ', b.size)
print('b dtype: ', b.dtype)

print('np.zeros((2,2)):\n', np.zeros((2,2)))
print('np.ones((2,2)):\n', np.ones((2,2)))
print('np.eye((2)):\n', np.eye((2)))
print('np.random.random((2,2)):\n', np.random.random((2,2)))

#indexing
x = np.array([1,2,3])
print('x: ', x)
print('x[0]: ', x[0])
x[0] = 0
print('x: ', x)

#slicing
x = np.array([[1,2,3,4], [5,6,7,8], [9,10,11,12]])
print(x)
print('x column 1: ', x[:, 1])
print('x row 0: ', x[0, :])
print('x rows 0,1 & cols 1,2: \n', x[0:2, 1:3])

#integer array indexing

print(x)
rowsget = np.array([0,1,2])
print('rowsget: ', rowsget)
colget = np.array([0,2,1])
print('colsget: ', colget)
#combine sequence 
print('indexed values: ', x[rowsget, colget])

#boolean array indexing

x = np.array([[1,2],[3,4],[5,6]])
print('x:\n', x)
print('x>2: \n', x>2)
print('x[x > 2]: \n', x[x > 2])

#arithmatic operations in array

x = np.array([[1, 2], [3, 4]], dtype = np.float64)
y = np.array([[1, 2], [3, 4]], dtype = np.float64)
print('x+y: \n', np.add(x, y)) # x + y
print('x-y: \n', np.subtract(x, y)) # x - y
print('x*y: \n', np.multiply(x, y)) # x * y

#dot product

a = np.array([[1,2,3], [4,5,6]], dtype = np.float64)
b = np.array([[7,8], [9,10], [11,12]], dtype = np.float64)
c = a.dot(b)
print(f"{a.shape} . {b.shape} = {c.shape}")
print(c)

#sum across a dimension

x = np.array([[1,2], [3,4]])
print(x)
print('sum all: ',np.sum(x)) #adds all elements
print('sum axis = 0', np.sum(x, axis = 0)) #sum across rows
print('sum axis = 1', np.sum(x, axis = 1)) #sum across columns

x = np.array([[1,2,3], [4,5,6]])
print('min: ', x.min())
print('max: ', x.max())
print('min axis = 0', x.min(axis = 0))
print('max axis = 1', x.max(axis = 1))

#broadcasting

x = np.array([1,2]) #vector
y = np.array(3) #scalar
z = x+y
print('z: \n', z)

#transposing

x = np.array([[1,2,3],[4,5,6]])
print('x: \n', x)
print('x.shape: ', x.shape)
y = np.transpose(x, (1,0)) #flip dimension at index 0 and 1
print('y: \n', y)
print('y.shape: ', y.shape)

#reshaping

x = np.array([[1,2,3,4,5,6]])
print(x)
print('x.shape: ', x.shape)
y = np.reshape(x, (2,3))
print('y: \n', y)
print('y.shape:  ', y.shape)
z = np.reshape(x, (2, -1))
print('z: \n', z)
print('z.shape: ', z.shape)

#uninteded reshaping done right with transpose

x = np.array([[[1, 1, 1, 1], [2, 2, 2, 2], [3, 3, 3, 3]],
              [[10, 10, 10, 10], [20, 20, 20, 20], [30, 30, 30, 30]]])
print ("x:\n", x)
print ("x.shape: ", x.shape)

#intended reshaping with transpose

y = np.transpose(x, (1,0,2))
print('y: \n', y)
print('y.shape: ', y.shape)
zcorrect = np.reshape(y, (y.shape[0], -1))
print('zcorrect: ', zcorrect)
print('zcorrect.shape: ', zcorrect.shape)

#adding dimensions

x = np.array([[1,2,3], [4,5,6]])
print('x: \n', x)
print('x.shape: ', x.shape)
y = np.expand_dims(x,1) #expand dim 1
print('y: \n', y)
print('y.shape: ', y.shape) #extra set of brackets added

#removing dimensions

x = np.array([[[1,2,3]], [[4,5,6]]])
print('x: \n', x)
print('x.shape: ', x.shape)
z = np.squeeze(x, 1) #expand dim 1
print('y: \n', y)
print('y.shape: ', y.shape) #extra set of brackets gone

